<?xml version="1.0"?>

<document>

  <properties>
    <title>Commons SQL</title>
    <author email="jstrachan@apache.org">James Strachan</author>
    <author email="jvanzyl@apache.com">Jason van Zyl</author>
    <author email="mpoeschl@marmot.at">Martin Poeschl</author>
  </properties>

  <body>

    <section name="What is Commons SQL?">
      <p>
        Commons SQL is a component for working with databases and generating DDL. Its
        based on experiences and ideas from the Turbine and Torque projects.
      </p>
      <p>
        Commons SQL contains a simple set of
        <a href="apidocs/org/apache/commons/sql/model/package-summary.html">beans</a>
        that represent a relational database schema such as a Database, Table, Column etc.
        These beans can be read from XML or written to XML using
        <a href="http://jakarta.apache.org/commons/betwixt/">Betwixt</a> via the
        <a href="apidocs/org/apache/commons/sql/io/DatabaseReader.html">DatabaseReader</a> and
        <a href="apidocs/org/apache/commons/sql/io/DatabaseWriter.html">DatabaseWriter</a> classes.
      </p>
      <p>
        There is an example XML document
        <a href="http://svn.apache.org/viewcvs/jakarta/commons/sandbox/sql/src/test-input/datamodel.xml">here</a>
      </p>
      <p>
        Once you have the relational model, either via beans or XML, you can then create the DDL to create or drop
        the database for various different phyiscal database.
        The <a href="apidocs/org/apache/commons/sql/builder/package-summary.html">builder</a>
        package contains a bunch of classes to generate the DDL for your database.
      </p>

      <p>
        Then the SQL beans can be used by code generation tools like
        <a href="http://jakarta.apache.org/velocity/">Velocity</a>
        or
        <a href="http://jakarta.apache.org/commons/sandbox/jelly/">Jelly</a>
        to create SQL DDL for different databases, HTML documentation, Java beans for each table,
        <a href="http://jakarta.apache.org/ojb/">OJB</a>
        repository files and so forth.
      </p>
    </section>

    <section name="Using Commons SQL in Ant or Maven">
      <p>
        There's also an Ant task to generate the DDL for a physical database. Here's an example of it in use.
      </p>

        <source><![CDATA[<taskdef name="ddl" classname="org.apache.commons.sql.task.DDLTask">
    <classpath refid="some.classpath"/>
</taskdef>

<ddl xmlFile="src/conf/myschema.xml" targetDatabase="oracle"
    output="target/myschema-oracle.sql"/>]]>
        </source>

      <p>
        The currently supported values for targetDatabase are:
      </p>

      <ul>
        <li>axion</li>
        <li>db2</li>
        <li>hsqldb</li>
        <li>mckoi</li>
        <li>mssql</li>
        <li>mysql</li>
        <li>oracle</li>
        <li>postgresql</li>
        <li>sybase</li>
      </ul>

      <p>
        It is hoped that Commons SQL can be used to create a
        <a href="http://maven.apache.org">Maven</a>
        plugin for projects wishing to create beans or OJB files from some logical relational schema.
      </p>
    </section>


    <section name="Using DynaBeans to access and change data in a database">
      <p>
        There's a simple API for querying and inserting, updating and deleting data via
        <a href="">DynaBeans</a>
        It essentially binds the commons-sql model beans
        (Database, Table, Column) to DyanClass, DynaBean and DynaProperty instances.
      </p>
      <p>
        So you can do things like
      </p>

<source><![CDATA[// lets parser the model from XML
DatabaseReader reader = new DatabaseReader();
Database model = (Database) reader.parse( "mymodel.xml" );

// JDBC connection pool, maybe using DBCP and Pool from commons
DataSource source = ...;

// now lets add some data
DynaSql dynaSql = new DynaSql(source, model);

DynaBean author = dynaSql.newInstance( "author" );
author.set( "name", "James" );
author.set( "whatever", new Integer(1234));
dynaSql.insert(author);]]>
</source>

    <p>
        Or perform arbitrary queries against the database like this
    </p>

<source><![CDATA[// perform a query with no arguments
Iterator iter = dynaSql.query( "select * from book" );
while (iter.hasNext()) {
    DynaBean book = (DynaBean) iter.next();
    String title = book.get("title");
    ...
}

// perform a query with arguments
List params = new ArrayList();
params.add("Some title");

Iterator iter = dynaSql.query( "select * from book where title = ?", params );
while (iter.hasNext()) {
    DynaBean book = (DynaBean) iter.next();
    String title = book.get("title");
    ...
}]]>
</source>

        <p>
            This can be handy if you want something really simple and easy or need to
            create dynamic tables or handle arbitrary database schemas at runtime.
            It can also be useful for writing simple bulk loading programs or working generically
            with SQL data.
        </p>
        <p>
            Though if your persistent schema is more well defined, tools like OJB or Torque might be more applicable.
        </p>


<!--
      <subsection name="Torque's generation tasks">
        <p>
          Torque uses a single XML database schema to generate the SQL for
          your target database and Torque's Peer-based object relation model
          representing your XML database schema. Additionally, an HTML document
          describing the database can be generated if you wish to make a
          browseable version of the database schema.
        </p>

        <p>
          Torque offers the following <a href="http://jakarta.apache.org/ant">
          Ant</a> tasks:
          <ul>
            <li>
              <strong>TorqueCreateDatabase</strong><br/>
              generates simple scripts for creating databases on various
              platforms.
            </li>
            <p/>
            <li>
              <strong>TorqueDataDTDTask</strong><br/>
              generates data DTD from an XML schema describing a database
              structure
            </li>
            <p/>
            <li>
              <strong>TorqueDataDumpTask</strong><br/>
              dumping data from db into XML
            </li>
            <p/>
            <li>
              <strong>TorqueDataSQLTask</strong><br/>
              generates SQL source from an XML data file
            </li>
            <p/>
            <li>
              <strong>TorqueJDBCTransformTask</strong><br/>
              generates an XML schema of an existing database from JDBC metadata
            </li>
            <p/>
            <li>
              <strong>TorqueObjectModelTask</strong><br/>
              generates output by using Velocity
            </li>
            <p/>
            <li>
              <strong>TorqueSQLExecTask</strong><br/>
              inserts a SQL file into its designated database
            </li>
            <p/>
            <li>
              <strong>TorqueSQLTask</strong><br/>
              generates SQL source from an XML schema describing a database
              structure
            </li>
            <p/>
            <li>
              <strong>TorqueSQLTransformTask</strong><br/>
              generates an xml schema from an sql schema
            </li>
            <p/>
            <li>
              <strong>TorqueDocumentationTask</strong><br/>
              generates html or xml documentation for xml schemas
            </li>
          </ul>
        </p>
      </subsection>

      <subsection name="Torque's runtime environment">
        <p>
          Torque's runtime environment includes everything you need to use the
          generated OM/Peer classes. It includes a jdbc connection pool.
        </p>
      </subsection>

    </section>

    <section name="Supported RDBMS">
      <table>
        <tr>
          <th>RDBMS</th>
          <th>driver</th>
          <th>status</th>
          <th>tester</th>
        </tr>
        <tr>
          <td>Cloudscape</td>
          <td>COM.cloudscape.core.JDBCDriver</td>
          <td>untested</td>
          <td></td>
        </tr>
        <tr>
          <td>DB2</td>
          <td>COM.ibm.db2.jdbc.{app|net}.DB2Driver</td>
          <td>untested</td>
          <td></td>
        </tr>
        <tr>
          <td>DB2/AS400</td>
          <td>com.ibm.as400.access.AS400JDBCDriver</td>
          <td>possible case-insensitivity issues</td>
          <td><a href="mailto:Sweaver@rippe.com">Scott Weaver</a></td>
        </tr>
        <tr>
          <td>Hypersonic</td>
          <td>org.hsql.jdbcDriver</td>
          <td>untested</td>
          <td></td>
        </tr>
        <tr>
          <td>Informix</td>
          <td>???</td>
          <td>untested</td>
          <td></td>
        </tr>
        <tr>
          <td>InstantDB</td>
          <td>org.enhydra.instantdb.jdbc.idbDriver</td>
          <td>untested</td>
          <td></td>
        </tr>
        <tr>
          <td>Interbase</td>
          <td>interbase.interclient.Driver</td>
          <td>untested</td>
          <td></td>
        </tr>
        <tr>
          <td><a href="mssql-howto.html">MS SQL</a></td>
          <td>com.microsoft.jdbc.sqlserver.SQLServerDriver</td>
          <td>untested</td>
          <td></td>
        </tr>
        <tr>
          <td>Mysql</td>
          <td>org.gjt.mm.mysql.Driver</td>
          <td>no known problems</td>
          <td><a href="mailto:mpoeschl@marmot.at">Martin Poeschl</a></td>
        </tr>
        <tr>
          <td><a href="oracle-howto.html">Oracle</a></td>
          <td>oracle.jdbc.driver.OracleDriver</td>
          <td>no known problems</td>
          <td><a href="mailto:mpoeschl@marmot.at">Martin Poeschl</a></td>
        </tr>
        <tr>
          <td><a href="postgres-howto.html">Postgres</a></td>
          <td>org.postgresql.Driver</td>
          <td>no known problems</td>
          <td><a href="mailto:mpoeschl@marmot.at">Martin Poeschl</a></td>
        </tr>
        <tr>
          <td>SapDB</td>
          <td>com.sap.dbtech.jdbc.DriverSapDB</td>
          <td>untested</td>
          <td></td>
        </tr>
        <tr>
          <td><a href="sybase-howto.html">Sybase</a></td>
          <td>com.sybase.jdbc2.jdbc.SybDriver</td>
          <td>
          JDBCToXMLSchema task will not generate the schema properly.
          All other tests pass.
          </td>
          <td><a href="mailto:brekke@apache.org">Jeffrey D. Brekke</a></td>
        </tr>
        <tr>
          <td>Weblogic</td>
          <td>weblogic.jdbc.pool.Driver</td>
          <td>untested</td>
          <td></td>
        </tr>
      </table>

      <p>
        If your RDBMS is not listed here, please read the document about
        <a href="db-adapters.html">writing DB Adapters</a>
      </p>
      <p>
        If there is no tester for your RDBMS and you want to help, please read
        the <a href="developer-guide.html">developer-guide</a>, run the tests
        and send your results (and bugfixes ;) to the turbine-dev list.
      </p>

-->
    </section>

  </body>
</document>
